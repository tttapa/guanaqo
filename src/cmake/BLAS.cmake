function(guanaqo_set_mkl_interface)
    set(MKL_INTERFACE_int32_t "lp64")
    set(MKL_INTERFACE_int64_t "ilp64")
    set(MKL_INTERFACE_int "lp64")
    set(MKL_INTERFACE_long "ilp64")
    set(MKL_INTERFACE_long-long "ilp64")
    set(MKL_INTERFACE_long-long-int "ilp64")
    string(REPLACE " " "-" INDEX_TYPE "${GUANAQO_BLAS_INDEX_TYPE}")
    if (NOT DEFINED MKL_INTERFACE_${INDEX_TYPE})
        message(SEND_ERROR "Unsupported index type ${GUANAQO_BLAS_INDEX_TYPE}")
    endif()
    set(MKL_INTERFACE "${MKL_INTERFACE_${INDEX_TYPE}}" PARENT_SCOPE)
endfunction()

if (GUANAQO_WITH_MKL AND GUANAQO_WITH_OPENBLAS)
    message(WARNING "Options GUANAQO_WITH_MKL and GUANAQO_WITH_OPENBLAS are both enabled. Using MKL and ignoring OpenBLAS.")
endif()

add_library(blas-lapack-lib INTERFACE)
target_compile_definitions(blas-lapack-lib INTERFACE
    $<$<BOOL:${GUANAQO_WITH_BLAS}>:GUANAQO_WITH_BLAS>
    $<$<BOOL:${GUANAQO_WITH_MKL}>:GUANAQO_WITH_MKL>
    $<$<BOOL:${GUANAQO_WITH_OPENBLAS}>:GUANAQO_WITH_OPENBLAS>
)
# MKL
if (GUANAQO_WITH_MKL)
    set(GUANAQO_MKLROOT_DEFINED false)
    if (NOT "${GUANAQO_MKLROOT}" STREQUAL "")
        set(GUANAQO_MKLROOT_DEFINED true)
    endif()
    if (NOT DEFINED MKL_THREADING)
        if (GUANAQO_WITH_OPENMP)
            if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(MKL_THREADING "gnu_thread")
            endif()
        else()
            set(MKL_THREADING "sequential")
        endif()
    endif()
    if (NOT DEFINED MKL_LINK)
        set(MKL_LINK "static")
    endif()
    if (NOT DEFINED MKL_INTERFACE)
        guanaqo_set_mkl_interface()
    endif()
    if (GUANAQO_MKLROOT_DEFINED AND NOT DEFINED ENV{MKLROOT})
        set(ENV{MKLROOT} "${GUANAQO_MKLROOT}")
    endif()
    if (DEFINED ENV{MKLROOT})
        list(PREPEND CMAKE_FIND_ROOT_PATH "$ENV{MKLROOT}")
    endif()
    find_package(MKL REQUIRED)
    target_link_libraries(blas-lapack-lib INTERFACE MKL::MKL)
# OpenBLAS
elseif(GUANAQO_WITH_OPENBLAS)
    find_package(OpenBLAS REQUIRED)
    target_link_libraries(blas-lapack-lib INTERFACE OpenBLAS::OpenBLAS)
# Generic BLAS/LAPACK
else()
    find_package(BLAS REQUIRED)
    find_package(LAPACK REQUIRED)
    target_link_libraries(blas-lapack-lib INTERFACE BLAS::BLAS LAPACK::LAPACK)
endif()
add_library(guanaqo::blas-lapack-lib ALIAS blas-lapack-lib)
