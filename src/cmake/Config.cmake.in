@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

set(GUANAQO_AVAILABLE_COMPONENTS "Core")
# Always require "Core"
list(PREPEND guanaqo_FIND_COMPONENTS "Core")
if (guanaqo_FIND_REQUIRED)
    set(guanaqo_FIND_REQUIRED_Core True)
endif()

foreach(COMP IN LISTS GUANAQO_AVAILABLE_COMPONENTS)
    set(guanaqo${COMP}_DIR ${CMAKE_CURRENT_LIST_DIR})
endforeach()

foreach(COMP IN LISTS guanaqo_FIND_COMPONENTS)
    if (NOT COMP IN_LIST GUANAQO_AVAILABLE_COMPONENTS)
        set(guanaqo_NOT_FOUND_MESSAGE "Invalid component: ${COMP}")
        set(guanaqo_FOUND False)
        return()
    endif()
    set(GUANAQO_FIND_REQUIRED_ARG)
    if(guanaqo_FIND_REQUIRED_${COMP})
        set(GUANAQO_FIND_REQUIRED_ARG REQUIRED)
    endif()
    find_package(guanaqo${COMP} QUIET ${GUANAQO_FIND_REQUIRED_ARG})
    if (NOT guanaqo${COMP}_FOUND)
        if (guanaqo_FIND_REQUIRED_${COMP})
            set(guanaqo_NOT_FOUND_MESSAGE "Missing required components: ${COMP} (find_package(guanaqo${COMP}) failed)")
            set(guanaqo_FOUND False)
            return()
        endif()
        set(guanaqo_${COMP}_FOUND False)
    else()
        set(guanaqo_${COMP}_FOUND True)
    endif()
endforeach()

set(GUANAQO_WITH_QUAD_PRECISION @GUANAQO_WITH_QUAD_PRECISION@ CACHE INTERNAL "")
set(GUANAQO_WITH_CXX_23 @GUANAQO_WITH_CXX_23@ CACHE INTERNAL "")

if (NOT _@PROJECT_NAME@_PRINTED AND guanaqo_Core_FOUND)
    get_target_property(GUANAQO_CONFIGS guanaqo::guanaqo IMPORTED_CONFIGURATIONS)
    message(STATUS "Found @PROJECT_NAME@ @PROJECT_VERSION@: ${CMAKE_CURRENT_LIST_DIR} (available configs: ${GUANAQO_CONFIGS}, installed components: @GUANAQO_OPTIONAL_COMPONENTS@, installed targets: @GUANAQO_INSTALL_TARGETS@)")
    set(_@PROJECT_NAME@_PRINTED On CACHE INTERNAL "")
endif()

check_required_components(guanaqo)
